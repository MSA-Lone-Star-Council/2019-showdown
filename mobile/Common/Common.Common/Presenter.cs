namespace Common.Common
{
    using Plugin.Connectivity;
    using System;
	using System.Threading.Tasks;

	/// <summary>
	/// Presenter is the base class for all presenters in the app. The presenter is pretty much
	/// the controller in MVC. It reads from a view's public fields and reacts to events generated by
	/// the view
	/// </summary>
	public class Presenter<V>
	{
        protected virtual Task OnlineMode  { get; set; }
        protected virtual Task OfflineMode { get; set; }

        protected V View { get; set; }

		/// <summary>
		/// Sets the view the presenter is holding
		/// </summary>
		/// <param name="view">The view the presenter should use</param>
		public virtual void TakeView(V view)
		{
			this.View = view;
		}

		/// <summary>
		/// Removes the view.
		/// </summary>
		public virtual void RemoveView()
		{
			this.View = default(V);
		}

        public bool IsConnected()
        {
            return CrossConnectivity.Current.IsConnected;
        }

        public async Task<bool> IsBackendReachable()
        {
            var connectivity = CrossConnectivity.Current;
            if (!connectivity.IsConnected) return false;

            var reachable = await connectivity.IsRemoteReachable(Secrets.BACKEND_URL);

            return reachable;
        }

        public virtual void OnStart()
        {
            var taskToRun = (IsConnected()) ? (OnlineMode) : (OfflineMode);
            taskToRun.Start();
        }
	}

}
